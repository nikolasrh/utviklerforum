/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package nikolasrh.utviklerforum

import arrow.core.curried
import nikolasrh.utviklerforum.examples.kleisli.*
import nikolasrh.utviklerforum.examples.kleisli.applyOp
import nikolasrh.utviklerforum.examples.kleisli.bind
import nikolasrh.utviklerforum.examples.kleisli.rtrn

class AppKleisli {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    // println(App().greeting)

    val major = MajorVersion.create(0)
    val minor = MinorVersion.create(0)
    val patch = PatchVersion.create(1)

    // if (major is Ok && minor is Ok && patch is Ok) {
    //     // val semver = SemanticVersion.create(major.value)(minor.value)(patch.value)
    //     val semver = SemanticVersion.createCurried(major.value)(minor.value)(patch.value)
    //     println(semver)
    // }

    val rCreate = rtrn(SemanticVersion.createCurried)

    // val result = flatten(apply(apply(apply(rCreate, major), minor), patch))
    // val result2 = (create applyOp major applyOp minor applyOp patch).let(::flatten)

    val rrSemanticVersion = rCreate applyOp major applyOp minor applyOp patch
    val rSemanticVersion = flatten(rrSemanticVersion)
    println(rSemanticVersion)

    val majorCreate = bind(MajorVersion::create, rtrn(1))

    val strToInt = { error: String, s: String ->
        runCatching { Ok(s.toInt()) }.getOrDefault(Error(error))
    }
    val strToIntCurried = strToInt.curried()

    val createMajorVersionFromString =
            kleisliCompose(MajorVersion::create, strToIntCurried("Major version is not a number"))
    val createMinorVersionFromString =
            kleisliCompose(MinorVersion::create, strToIntCurried("Minor version is not a number"))
    val createPatchVersionFromString =
            kleisliCompose(PatchVersion::create, strToIntCurried("Patch version is not a number"))

    val sMajor = "-7"
    val sMinor = "1"
    val sPatch = "Z"

    val rrSemanticVersionFromStrings =
            rCreate applyOp
                    createMajorVersionFromString(sMajor) applyOp
                    createMinorVersionFromString(sMinor) applyOp
                    createPatchVersionFromString(sPatch)

    val rSemanticVersionFromStrings = flatten(rrSemanticVersionFromStrings)

    println(rSemanticVersionFromStrings)
}
